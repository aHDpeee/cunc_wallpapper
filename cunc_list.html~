<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Список учеников</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      margin: 0;
      height: 100vh;
      display: flex;
      background: url('https://picsum.photos/1920/1080') no-repeat center/cover;
      position: relative;
      overflow: hidden;
    }

    .main {
      position: fixed;
      bottom: 20px;
      left: 20px;
      width: auto;
      height: auto;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      padding: 12px;
      box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    h2, h3 {
      font-size: 16px;
      color: white;
      margin: 0 0 10px;
      text-align: center;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th, td {
      padding: 6px;
      text-align: center;
      font-size: 12px;
      color: #fff;
      border: none;
    }

    th {
      background: rgba(0, 0, 0, 0.4);
      border-radius: 6px;
    }

    tr {
      transition: background 0.2s;
    }

    tr:hover {
      background: rgba(255, 255, 255, 0.1);
    }

    td span {
      cursor: pointer;
      font-size: 12px;
    }

    td.present {
      color: #00ff00;
    }

    td.absent {
      color: #ff0000;
    }

    .controls {
      margin-top: 10px;
      display: flex;
      gap: 5px;
    }

    input[type="text"], input[type="url"] {
      flex: 1;
      padding: 6px;
      border: none;
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.2);
      color: #fff;
      font-size: 12px;
    }

    input[type="text"]::placeholder, input[type="url"]::placeholder {
      color: rgba(255, 255, 255, 0.6);
    }

    button {
      padding: 6px 12px;
      border: none;
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.2);
      color: #fff;
      cursor: pointer;
      font-size: 12px;
      transition: background 0.2s;
    }

    button:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    .qr-box {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 4vw;
      min-width: 120px;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      padding: 8px;
      text-align: center;
      box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    #qrcode {
      border-radius: 8px;
      background: #fff;
      padding: 5px;
      width: 100%;
      height: auto;
    }

    #qrtext {
      font-size: 10px;
      color: #fff;
      margin: 8px 0;
      word-wrap: break-word;
    }

    .settings-btn {
      position: fixed;
      top: 20px;
      right: 20px;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 20px;
      color: #fff;
    }

    .settings-btn:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    .settings-popup {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      padding: 20px;
      box-shadow: 0 4px 30px rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.2);
      z-index: 1000;
      width: 300px;
    }

    .settings-popup.active {
      display: block;
    }

    .blur {
      filter: blur(5px);
      pointer-events: none;
    }

    .days {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 10px;
      margin-bottom: 10px;
    }

    .days label {
      display: flex;
      flex-direction: column;
      align-items: center;
      font-size: 12px;
      color: #fff;
    }

    .days input {
      width: 50px;
      padding: 4px;
      border: none;
      border-radius: 6px;
      background: rgba(255, 255, 255, 0.2);
      color: #fff;
      text-align: center;
      font-size: 12px;
    }

    .options label {
      display: block;
      font-size: 12px;
      color: #fff;
      margin-bottom: 10px;
    }

    input[type="checkbox"] {
      accent-color: #007aff;
    }

    .close-settings {
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      color: #fff;
      font-size: 16px;
      cursor: pointer;
    }

    .context-menu {
      position: absolute;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 8px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
      z-index: 2000;
      padding: 5px 0;
    }

    .context-menu div {
      padding: 8px 12px;
      color: #fff;
      font-size: 12px;
      cursor: pointer;
    }

    .context-menu div:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    #clock {
      position: fixed;
      top: 20px;
      left: 20px;
      color: #fff;
      font-size: 14px;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 8px;
      padding: 5px 10px;
    }
  </style>
</head>
<body>
  <div id="clock"></div>
  <div class="main">
    <h2>Список учеников</h2>
    <table id="studentsTable">
      <thead>
        <tr>
          <th>Фамилия Имя</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
    <div class="controls">
      <input type="text" id="newStudent" placeholder="Фамилия Имя">
      <button onclick="addStudent()">Добавить</button>
    </div>
  </div>

  <div class="qr-box">
    <canvas id="qrcode"></canvas>
    <p id="qrtext"></p>
    <button onclick="copyText()">Копировать текст</button>
  </div>

  <div class="settings-btn" onclick="toggleSettings()">⚙️</div>

  <div class="settings-popup" id="settingsPopup">
    <button class="close-settings" onclick="toggleSettings()">✕</button>
    <h3>Настройки</h3>
    <div class="days">
      <label>Пн <input type="number" id="mon" value="6" min="1" max="12"></label>
      <label>Вт <input type="number" id="tue" value="6" min="1" max="12"></label>
      <label>Ср <input type="number" id="wed" value="6" min="1" max="12"></label>
      <label>Чт <input type="number" id="thu" value="6" min="1" max="12"></label>
      <label>Пт <input type="number" id="fri" value="6" min="1" max="12"></label>
      <label>Сб <input type="number" id="sat" value="6" min="1" max="12"></label>
    </div>
    <div class="options">
      <label><input type="checkbox" id="alwaysSnackLunch"> Всегда полдник на обеде</label>
      <label>URL фонового изображения: <input type="url" id="backgroundImageUrl" placeholder="https://example.com/image.jpg"></label>
      <label>URL шрифта: <input type="url" id="customFontUrl" placeholder="https://fonts.googleapis.com/..."></label>
    </div>
  </div>

  <script>
    const defaultStudents = [
      "Агарков Максим","Алейников Роман","Анцупова Настя","Борисов Андрей","Волков Евгений","Волков Игорь",
      "Высочкина Мария","Горелик Мирослав","Ищенко Иван","Протасов Кирилл","Кличенко Елизавета",
      "Кличенко Иван","Лисицын Руслан","Нерубенко Александр","Рябикин Дмитрий","Салакаев Амин",
      "Сосновский Ярослав","Чернышов Егор"
    ];
    const internatInit = ["Протасов Кирилл","Высочкина Мария","Салакаев Амин"];

    function loadData() {
      try {
        const data = localStorage.getItem("studentsData");
        if (data) return JSON.parse(data);
      } catch (e) {
        console.error("Ошибка загрузки studentsData:", e);
        alert("Не удалось загрузить данные студентов. Хранилище переполнено или недоступно.");
      }
      return defaultStudents.map(n => ({
        name: n,
        present: true,
        internat: internatInit.includes(n)
      }));
    }
    let students = loadData();

    function loadBackground() {
      try {
        const bgUrl = localStorage.getItem("backgroundImageUrl");
        if (bgUrl) {
          const img = new Image();
          img.crossOrigin = "anonymous";
          img.src = bgUrl;
          img.onload = () => {
            document.body.style.backgroundImage = `url(${bgUrl})`;
          };
          img.onerror = () => {
            console.error("Ошибка загрузки фона:", bgUrl);
            alert("Не удалось загрузить фоновое изображение. Проверьте URL и CORS.");
          };
        }
      } catch (e) {
        console.error("Ошибка загрузки фона:", e);
        alert("Не удалось загрузить фоновое изображение.");
      }
    }

    function loadCustomFont() {
      try {
        const fontUrl = localStorage.getItem("customFontUrl");
        if (fontUrl) {
          const link = document.createElement("link");
          link.href = fontUrl;
          link.rel = "stylesheet";
          link.crossOrigin = "anonymous";
          link.onload = () => {
            document.body.style.fontFamily = 'CustomFont, Inter, sans-serif';
          };
          link.onerror = () => {
            console.error("Ошибка загрузки шрифта:", fontUrl);
            alert("Не удалось загрузить шрифт. Проверьте URL и CORS.");
          };
          document.head.appendChild(link);
        }
      } catch (e) {
        console.error("Ошибка загрузки шрифта:", e);
        alert("Не удалось загрузить шрифт.");
      }
    }

    const tbody = document.querySelector("#studentsTable tbody");

    function renderTable() {
      tbody.innerHTML = "";
      students.sort((a, b) => a.name.localeCompare(b.name));
      students.forEach((s, idx) => {
        const tr = document.createElement("tr");
        const tdName = document.createElement("td");
        tdName.textContent = s.internat ? `${s.name} *` : s.name;
        tdName.className = s.present ? 'present' : 'absent';
        tdName.dataset.index = idx;
        tr.appendChild(tdName);
        tbody.appendChild(tr);
      });
    }

    function addStudent() {
      const inp = document.getElementById("newStudent");
      const name = inp.value.trim();
      if (name) {
        students.push({ name, present: true, internat: false });
        inp.value = "";
        saveData();
        renderTable();
        updateQR();
      }
    }

    function saveData() {
      try {
        localStorage.setItem("studentsData", JSON.stringify(students));
      } catch (e) {
        console.error("Ошибка сохранения studentsData:", e);
        alert("Не удалось сохранить данные студентов. Хранилище переполнено.");
      }
    }

    function getTodayLessons() {
      const day = new Date().getDay();
      const map = ["sun","mon","tue","wed","thu","fri","sat"];
      const id = map[day];
      if (!id || !document.getElementById(id)) return 0;
      return +document.getElementById(id).value;
    }

    function calcMeals() {
      const lessons = getTodayLessons();
      const alwaysSnackLunch = document.getElementById("alwaysSnackLunch").checked;
      const presentStudents = students.filter(s => s.present);
      const presentCount = presentStudents.length;

      let second = 0, lunch = 0, snackLunch = 0, snack = 0;

      presentStudents.forEach(s => {
        if (s.internat) {
          second++; lunch++; snack++;
        } else {
          if (lessons >= 3) second++;
          if (lessons >= 6) lunch++;
          if (alwaysSnackLunch) {
            snackLunch++;
          } else {
            if (lessons >= 8) {
              snack++;
            } else {
              if (lessons >= 6) snackLunch++;
            }
          }
        }
      });

      return `11 ИТ ${presentCount}/${students.length}\n` +
             `Второй завтрак ${second}\n` +
             `Обед ${lunch} Полдник на обеде ${snackLunch}\n` +
             `Полдник ${snack}`;
    }

    function updateQR() {
      const txt = calcMeals();
      document.getElementById("qrtext").innerText = txt;
      new QRious({
        element: document.getElementById("qrcode"),
        value: txt,
        size: 100,
        level: 'L'
      });
    }

    function copyText() {
      const txt = document.getElementById("qrtext").innerText;
      navigator.clipboard.writeText(txt).then(() => {
        alert("Текст скопирован!");
      });
    }

    function toggleSettings() {
      const popup = document.getElementById("settingsPopup");
      const main = document.querySelector(".main");
      const qrBox = document.querySelector(".qr-box");
      const clock = document.getElementById("clock");
      popup.classList.toggle("active");
      main.classList.toggle("blur");
      qrBox.classList.toggle("blur");
      clock.classList.toggle("blur");
    }

    function showContextMenu(e, idx) {
      e.preventDefault();
      const existingMenu = document.querySelector(".context-menu");
      if (existingMenu) existingMenu.remove();

      const menu = document.createElement("div");
      menu.className = "context-menu";
      menu.style.left = `${e.pageX}px`;
      menu.style.top = `${e.pageY}px`;

      const togglePresent = document.createElement("div");
      togglePresent.textContent = students[idx].present ? "Отметить отсутствующим" : "Отметить присутствующим";
      togglePresent.onclick = () => {
        students[idx].present = !students[idx].present;
        saveData();
        renderTable();
        updateQR();
        menu.remove();
      };

      const toggleInternat = document.createElement("div");
      toggleInternat.textContent = students[idx].internat ? "Убрать из интерната" : "Добавить в интернат";
      toggleInternat.onclick = () => {
        students[idx].internat = !students[idx].internat;
        saveData();
        renderTable();
        updateQR();
        menu.remove();
      };

      const deleteStudent = document.createElement("div");
      deleteStudent.textContent = "Удалить";
      deleteStudent.onclick = () => {
        students.splice(idx, 1);
        saveData();
        renderTable();
        updateQR();
        menu.remove();
      };

      menu.append(togglePresent, toggleInternat, deleteStudent);
      document.body.appendChild(menu);

      document.addEventListener("click", () => menu.remove(), { once: true });
    }

    document.querySelectorAll(".days input").forEach(inp => inp.onchange = updateQR);
    document.getElementById("alwaysSnackLunch").onchange = updateQR;

    document.getElementById("backgroundImageUrl").addEventListener("change", (e) => {
      const url = e.target.value.trim();
      if (url) {
        const img = new Image();
        img.crossOrigin = "anonymous";
        img.src = url;
        img.onload = () => {
          document.body.style.backgroundImage = `url(${url})`;
          try {
            localStorage.setItem("backgroundImageUrl", url);
          } catch (e) {
            console.error("Ошибка сохранения URL фона:", e);
            alert("Не удалось сохранить URL фона. Хранилище переполнено.");
          }
        };
        img.onerror = () => {
          alert("Не удалось загрузить фоновое изображение. Убедитесь, что URL доступен и поддерживает CORS.");
        };
      }
    });

    document.getElementById("customFontUrl").addEventListener("change", (e) => {
      const url = e.target.value.trim();
      if (url) {
        const link = document.createElement("link");
        link.href = url;
        link.rel = "stylesheet";
        link.crossOrigin = "anonymous";
        link.onload = () => {
          document.body.style.fontFamily = 'CustomFont, Inter, sans-serif';
          try {
            localStorage.setItem("customFontUrl", url);
          } catch (e) {
            console.error("Ошибка сохранения URL шрифта:", e);
            alert("Не удалось сохранить URL шрифта. Хранилище переполнено.");
          }
        };
        link.onerror = () => {
          alert("Не удалось загрузить шрифт. Убедитесь, что URL доступен и поддерживает CORS.");
        };
        document.head.appendChild(link);
      }
    });

    function updateClock() {
      const now = new Date();
      const time = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
      document.getElementById("clock").textContent = time;
    }

    window.onload = () => {
      renderTable();
      updateQR();
      loadBackground();
      loadCustomFont();
      updateClock();
      setInterval(updateClock, 1000);

      tbody.addEventListener("contextmenu", (e) => {
        const idx = e.target.dataset.index;
        if (idx !== undefined) {
          showContextMenu(e, idx);
        }
      });
    };
  </script>
</body>
</html>
